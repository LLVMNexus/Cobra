
!echo "Rule 1 (Required) All code shall conform to ISO 9899:1990 standard C, with no extensions permitted."
# checked by compiler

!echo "Rule 2 (Advisory) Code written in languages other than C should only be used if there is a defined interface standard for object code to which the compilers/assemblers for both languages conform."
# outside scope of static analysis

!echo "Rule 4 (Advisory) Provision should be made for appropriate runtime checking. Minimization of run-time failures must be ensured by the use of at least one of (a) static analysis tools/techniques (b) dynamic analysis tools/techniques (c) explicit coding of checks to handle run-time faults. (as revised) "
# outside scope of static analysis

!echo "Rule 6 (Required) Character constants and string literals shall only contain characters that map to a defined subset of ISO 10646-1."
# e.g., the ASCII subset of Unicode: 0..127

!echo "Rule 12 (Advisory) No identifier in one name space shall have the same spelling as an identifier in another name space."
# eg: Do not reuse name of a record in a struct or union for variables declared elsewhere.
# XXX Consider adding.

!echo "Rule 15 (Advisory) Floating point implementations should comply with a defined floating point standard."
# outside scope of static analysis

!echo "Rule 16 (Required) The underlying bit representations of floating point numbers shall not be used in any way by the programmer."
# unlikely to be violated, could check for bit-operators used on floating point vars

!echo "Rule 17 (Required) Typedef names shall not be reused for any other purpose in the application."
# eg as a structure name, labelname -- compiler likely checks this

!echo "Rule 18 (Advisory) Numeric constants must be given an appropriate suffix that reveals their intended type, e.g., 27u, whenever an appropriate suffix is available."
# checking 'intent' is outside scope of static analysis

!echo "Rule 20 (Required) All object and function identifiers shall be declared before use."
# checked by compiler

!echo "Rule 21 (Required) Declarations (e.g. of identifiers) within an inner scope should not hide any declarations in an outer scope."
# XXX consider adding a check

!echo "Rule 25 (Required) An identifier with external linkage shall have exactly one external definition."
# checked by compiler

!echo "Rule 26 (Required) If objects or functions are declared more than once they shall have compatible declarations."
# XXX check if decl and extern decls match

!echo "Rule 27 (Advisory) External objects should not be declared in more than one file."
# XXX check for one extern per decl

!echo "Rule 29 (Required) The use of a tag shall agree with its declaration."
# harder to check

!echo "Rule 30 (Required) All automatic variables shall have been assigned a value before being used."
# XXX use the weak uninit check

!echo "Rule 31 (Required) Braces shall be used to indicate and match the structure in the non-zero initialisation of arrays and structures."
# compiler checked

!echo "Rule 34 (Required) The operands of a logical && or || shall be primary expressions."
# XXX add available check for this -- means that all conditional clauses must be parenthesized

!echo "Rule 37 (Required) Bitwise operations shall not be performed on signed integer types."
# later

!echo "Rule 38 (Required) The right hand operand of a shift operator shall lie between zero and one less than the width in bits of the left hand operand (inclusive)."
# later

!echo "Rule 39 (Required) The unary minus operator shall not be applied to an unsigned expression."
# later

!echo "Rule 41 (Advisory) The implementation of integer division in the chosen compiler should be determined, documented and taken into account."
# outside scope of static analysis

!echo "Rule 42 (Required) The comma operator shall not be used, except in the control expression of a for-loop. (and in declarations or fct args) "
# XXX add check, eg: m ,; w .curly>0; b (; b; unmark for; n; n ,

!echo "Rule 43 (Required) Implicit type conversions which may result in a loss of information shall not be used."
# later

!echo "Rule 44 (Advisory) (As revised:) Redundant or unnecessary casts are allowed, but must be identified as such in a comment."
# outside scope of static analysis

!echo "Rule 45 (Required) Type casting from any type to or from pointers shall not be used. (As revised:) Pointers must have an associated type (of the object pointed to). Operations on pointers of mixed type are not allowed, e.g. int_ptr = (int *) short_ptr;"
# XXX flag void pointers

!echo "Rule 46 (Required) The value of an expression shall be the same under any order of evaluation that the standard permits."
# later

!echo "Rule 47 (Advisory) No dependence should be placed on C's operator precedence rules in expressions. When an expression contains several operators, and these operators have different levels of precedence, parentheses should be used to enforce the desired precedences."
# later

!echo "Rule 48 (Advisory) Mixed precision arithmetic should use explicit casting to generate the desired result."
# later

!echo "Rule 49 (Advisory) Tests of a value against zero should be made explicit, unless the operand is effectively Boolean."
# XXX add check, e.g. for single token conditions

!echo "Rule 51 (Advisory) Evaluation of constant unsigned integer expressions should not lead to wrap-around."
# elsewhere

!echo "Rule 52 (Required) There shall be no unreachable code. As revised: ..., unless it explicitly deals with exception and failure cases (e.g., dealing with possibly corrupted data values)."
# not cobra

!echo "Rule 53 (Required) All non-null statements either have a side-effect or change the flow of control."
# dubious

!echo "Rule 65 (Required) Floating point variables shall not be used as loop counters."
# XXX could try to check

!echo "Rule 66 (Advisory) Only expressions concerned with loop control should appear within a for statement."
# XXX could add check

!echo "Rule 68 (Required) Functions shall always be declared at file scope."
# compiler checks

!echo "Rule 71 (Required) Functions shall always have prototype declarations and the prototype shall be visible at both the function definition and call."
# XXX could check

!echo "Rule 72 (Required) For each function parameter the type given in the declaration and definition shall be identical, and the return types shall also be identical."
# compiler checks?

!echo "Rule 73 (Required) Identifiers shall either be given for all of the parameters in a function prototype declaration, or for none."
# XXX add check

!echo "Rule 74 (Required) If identifiers are given for any of the parameters, then the identifiers used in the declaration and definition shall be identical."
# XXX add check

!echo "Rule 77 (Required) The unqualified type of parameters passed to a function shall be compatible with the unqualified expected types defined in the function prototype."
# compiler can check

!echo "Rule 78 (Required) The number of parameters passed to a function shall match the function prototype."
# compiler checks -- but XXX could add check

!echo "Rule 79 (Required) The values returned by void functions shall not be used."
# checked by compiler

!echo "Rule 81 (Advisory) const qualification should be used on function parameters which are passed by reference, where it is intended that the function will not modify the parameter."
# XXX add a check for params that aren't modifed in fct body, and recommend const qualifiers

!echo "Rule 84 (Required) For functions with void return type, return statements shall not have an expression."
# XXX could check similar to 83

!echo "Rule 85 (Advisory) Functions called with no parameters should have empty parentheses."
# checked by compiler

!echo "Rule 86 (Advisory) If a function returns error information, then that error information should be tested."
# XXX check which jpl/p10 rule already covers this

!echo "Rule 90 (Required) C macros shall only be used for symbolic constants, function-like macros, type qualifiers and storage class specifiers."
# XXX check which jpl/p10 rule already covers this

!echo "Rule 93 (Advisory) A function should be used in preference to a function-like macro."
# XXX check for macros enclosed in { .. }

!echo "Rule 94 (Required) A function-like macro shall not be 'called' without all of its arguments."
# compiler checks

!echo "Rule 95 (Required) Arguments to a function-like macro shall not contain tokens that look like pre-processing directives."
# XXX add check

!echo "Rule 96 (Required) In the definition of a function-like macro the whole definition, and each instance of a parameter, shall be enclosed in parentheses."
# XXX check which jpl/p10 rule covers this

!echo "Rule 97 (Advisory) Identifiers in pre-processor directives should be defined before use."
# XXX add check

!echo "Rule 101 (Advisory) Pointer arithmetic should not be used."
# not cobra

!echo "Rule 103 (Required) Relational operators shall not be applied to pointer types except where both operands are of the same type and point to the same array, structure or union."
# not cobra

!echo "Rule 104 (Required) Non-constant pointers to functions shall not be used."
# XXX add check for fct pointers

!echo "Rule 105 (Required) All the functions pointed to by a single pointer to function shall be identical in the number and type of parameters and the return type."
# XXX add check

!echo "Rule 106 (Required) The address of an object with automatic storage shall not be assigned to an object which may persist after the object has ceased to exist."
# XXX check for return of local vars

!echo "Rule 107 (Required) The null pointer shall not be de-referenced. Explanation: Unless clear from local context, one should distrust the validity of pointers before dereferencing -- i.e., when pointers are passed into a function or when returned by a function."
# XXX use jpl/p10 rule for params

!echo "Rule 108 (Required) In the specification of a structure or union type, all members of the structure or union shall be fully specified."
# XXX add check (eg array bounds?)

!echo "Rule 109 (Required) Overlapping variable storage shall not be used."
# not cobra

!echo "Rule 111 (Required) Bit fields shall only be defined to be of type unsigned int or signed int."
# XXX add check

!echo "Rule 113 (Required) All members of a structure (or union) shall be named and shall only be accessed via their name."
# not cobra

!echo "Rule 114 (Required) Reserved words and standard library function names shall not be redefined or undefined."
# XXX add check against fixed list

!echo "Rule 115 (Required) Standard library function names shall not be reused."
# XXX add check against fixed list

!echo "Rule 116 (Required) All libraries used in production code shall be written to comply with the provisions of these rules, and shall have been subject to appropriate validation."
# outside scope

!echo "Rule 117 (Required) The validity of values passed to (and received from) library functions shall be checked."
# XXX check which jpl/p10 rule covers this
